#pragma kernel VertexCreation

//StructuredBuffer<float4> _noiseMap;
//float _isoLevel;
uniform int _gridSize;

struct Vertex
{
	float3 vPosition;
	float3 vNormal;
};

struct Triangle
{
	Vertex v[3];
};

//AppendStructuredBuffer<Triangle> triangleRW;
RWStructuredBuffer<Vertex> vertexBuffer : register(u1);

StructuredBuffer<uint> voxelIDs;
RWStructuredBuffer<uint3> tempIndices : register(u2);

static const int edgeTable[256] = {
	0x0  , 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
	0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
	0x190, 0x99 , 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
	0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
	0x230, 0x339, 0x33 , 0x13a, 0x636, 0x73f, 0x435, 0x53c,
	0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
	0x3a0, 0x2a9, 0x1a3, 0xaa , 0x7a6, 0x6af, 0x5a5, 0x4ac,
	0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
	0x460, 0x569, 0x663, 0x76a, 0x66 , 0x16f, 0x265, 0x36c,
	0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
	0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff , 0x3f5, 0x2fc,
	0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
	0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55 , 0x15c,
	0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
	0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc ,
	0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
	0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
	0xcc , 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
	0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
	0x15c, 0x55 , 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
	0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
	0x2fc, 0x3f5, 0xff , 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
	0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
	0x36c, 0x265, 0x16f, 0x66 , 0x76a, 0x663, 0x569, 0x460,
	0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
	0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa , 0x1a3, 0x2a9, 0x3a0,
	0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
	0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33 , 0x339, 0x230,
	0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
	0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99 , 0x190,
	0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
	0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0 };



float3 VertexInterp(float3 p1, float3 p2)
{
	return lerp(p1, p2, 0.5);
}

int GetIndex(int3 pos)
{
    return pos.z + pos.y * _gridSize + pos.x * _gridSize * _gridSize;

}

[numthreads(1, 1, 1)]
void VertexCreation(uint3 threadId : SV_DispatchThreadID)
{
    
    uint cubeIndex = voxelIDs.Load(threadId.x);
    
    uint z = cubeIndex >> 24;
    uint y = cubeIndex << 8;
    y = y >> 24;
    uint x = cubeIndex << 16;
    x = x >> 24;
	float3 offset = float3(-0.5, -0.5, -0.5);
    
    uint3 pos = uint3(x, y, z);

	float3 p[4] = {
        p[0] = (pos + float3(0, 0, 1)) + offset,
		p[1] = (pos + float3(1, 0, 0)) + offset,
		p[2] = (pos + float3(0, 0, 0)) + offset,
		p[3] = (pos + float3(0, 1, 0)) + offset
    };

    
    
    cubeIndex = cubeIndex << 24;
    cubeIndex = cubeIndex >> 24;

    uint3 indices = uint3(-1, -1, 1);
	if (edgeTable[cubeIndex] & 4)
    {
        uint vertIndex = vertexBuffer.IncrementCounter();
        Vertex vert;
        vert.vPosition = VertexInterp(p[1], p[2]);
        vert.vNormal = 1;
        vertexBuffer[vertIndex] = vert;
        indices.x = vertIndex;
    }
	if (edgeTable[cubeIndex] & 8)
    {
        uint vertIndex = vertexBuffer.IncrementCounter();
        Vertex vert;
        vert.vPosition = VertexInterp(p[2], p[0]);
        vert.vNormal = 1;
        vertexBuffer[vertIndex] = vert;
        indices.z = vertIndex;
    }
	if (edgeTable[cubeIndex] & 2048)
    {
        uint vertIndex = vertexBuffer.IncrementCounter();
        Vertex vert;
        vert.vPosition = VertexInterp(p[2], p[3]);
        vert.vNormal = 1;
        vertexBuffer[vertIndex] = vert;
        indices.y = vertIndex;
    }
    if(indices.x != -1 || indices.y != -1 || indices.z != -1)
        tempIndices[GetIndex(pos)] = indices;

}